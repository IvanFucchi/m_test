{"ast":null,"code":"var _jsxFileName = \"/Users/ivanfucchi/Desktop/EPICODE/progetti/capstone/musa-refactored/frontend/src/context/AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Crea il contesto di autenticazione\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// API base URL\nconst API_URL = 'http://localhost:5000/api';\n\n// Configura axios per gestire automaticamente i token\nconst setupAxiosInterceptors = token => {\n  // Interceptor per le richieste\n  axios.interceptors.request.use(config => {\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  }, error => Promise.reject(error));\n\n  // Interceptor per le risposte\n  axios.interceptors.response.use(response => response, async error => {\n    var _error$response;\n    const originalRequest = error.config;\n\n    // Se l'errore è 401 (non autorizzato) e non è già un retry\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      // Qui potremmo implementare un refresh token in futuro\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  });\n};\n\n// Hook personalizzato per utilizzare il contesto di autenticazione\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Controlla se l'utente è già autenticato al caricamento\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        // Recupera il token dal localStorage\n        const token = localStorage.getItem('token');\n        if (!token) {\n          setLoading(false);\n          return;\n        }\n\n        // Configura axios interceptors\n        setupAxiosInterceptors(token);\n\n        // Verifica il token con il backend\n        const {\n          data\n        } = await axios.get(`${API_URL}/auth/verify`);\n        if (data.success) {\n          setUser(data.user);\n          setIsAuthenticated(true);\n        } else {\n          // Se la verifica fallisce, rimuovi il token\n          localStorage.removeItem('token');\n        }\n      } catch (err) {\n        var _err$response, _err$response$data;\n        console.error('Errore durante la verifica dell\\'autenticazione:', err);\n        localStorage.removeItem('token');\n        setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Sessione scaduta, effettua nuovamente il login');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Funzione di login\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const {\n        data\n      } = await axios.post(`${API_URL}/auth/login`, {\n        email,\n        password\n      });\n      if (data.success) {\n        // Salva il token nel localStorage\n        localStorage.setItem('token', data.user.token);\n\n        // Configura axios interceptors\n        setupAxiosInterceptors(data.user.token);\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(data.message || 'Credenziali non valide');\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data, _err$response3, _err$response3$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Errore durante il login');\n      return {\n        success: false,\n        error: ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Errore durante il login'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Funzione di registrazione\n  const register = async (name, email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const {\n        data\n      } = await axios.post(`${API_URL}/auth/register`, {\n        name,\n        email,\n        password\n      });\n      if (data.success) {\n        // Salva il token nel localStorage\n        localStorage.setItem('token', data.user.token);\n\n        // Configura axios interceptors\n        setupAxiosInterceptors(data.user.token);\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(data.message || 'Errore durante la registrazione');\n      }\n    } catch (err) {\n      var _err$response4, _err$response4$data, _err$response5, _err$response5$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Errore durante la registrazione');\n      return {\n        success: false,\n        error: ((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Errore durante la registrazione'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Funzione di logout\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // Reimposta gli interceptors\n    setupAxiosInterceptors(null);\n\n    // Redirect alla home\n    window.location.href = '/';\n  };\n\n  // Funzione per aggiornare il profilo\n  const updateProfile = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const {\n        data\n      } = await axios.put(`${API_URL}/auth/profile`, userData);\n      if (data.success) {\n        setUser(data.user);\n\n        // Aggiorna il token se è stato restituito un nuovo token\n        if (data.user.token) {\n          localStorage.setItem('token', data.user.token);\n          setupAxiosInterceptors(data.user.token);\n        }\n        return {\n          success: true\n        };\n      } else {\n        throw new Error(data.message || 'Errore durante l\\'aggiornamento del profilo');\n      }\n    } catch (err) {\n      var _err$response6, _err$response6$data, _err$response7, _err$response7$data;\n      setError(((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'Errore durante l\\'aggiornamento del profilo');\n      return {\n        success: false,\n        error: ((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.message) || 'Errore durante l\\'aggiornamento del profilo'\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Valore del contesto\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"AaZCefjEQIISzggwPe9U62ieYJk=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","API_URL","setupAxiosInterceptors","token","interceptors","request","use","config","headers","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","localStorage","removeItem","window","location","href","useAuth","_s","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","setError","checkAuthStatus","getItem","data","get","success","err","_err$response","_err$response$data","console","message","login","email","password","post","setItem","Error","_err$response2","_err$response2$data","_err$response3","_err$response3$data","register","name","_err$response4","_err$response4$data","_err$response5","_err$response5$data","logout","updateProfile","userData","put","_err$response6","_err$response6$data","_err$response7","_err$response7$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ivanfucchi/Desktop/EPICODE/progetti/capstone/musa-refactored/frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Crea il contesto di autenticazione\nconst AuthContext = createContext();\n\n// API base URL\nconst API_URL = 'http://localhost:5000/api';\n\n// Configura axios per gestire automaticamente i token\nconst setupAxiosInterceptors = (token) => {\n  // Interceptor per le richieste\n  axios.interceptors.request.use(\n    (config) => {\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => Promise.reject(error)\n  );\n\n  // Interceptor per le risposte\n  axios.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n      const originalRequest = error.config;\n      \n      // Se l'errore è 401 (non autorizzato) e non è già un retry\n      if (error.response?.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        \n        // Qui potremmo implementare un refresh token in futuro\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n      \n      return Promise.reject(error);\n    }\n  );\n};\n\n// Hook personalizzato per utilizzare il contesto di autenticazione\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Controlla se l'utente è già autenticato al caricamento\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        // Recupera il token dal localStorage\n        const token = localStorage.getItem('token');\n        \n        if (!token) {\n          setLoading(false);\n          return;\n        }\n        \n        // Configura axios interceptors\n        setupAxiosInterceptors(token);\n        \n        // Verifica il token con il backend\n        const { data } = await axios.get(`${API_URL}/auth/verify`);\n        \n        if (data.success) {\n          setUser(data.user);\n          setIsAuthenticated(true);\n        } else {\n          // Se la verifica fallisce, rimuovi il token\n          localStorage.removeItem('token');\n        }\n      } catch (err) {\n        console.error('Errore durante la verifica dell\\'autenticazione:', err);\n        localStorage.removeItem('token');\n        setError(err.response?.data?.message || 'Sessione scaduta, effettua nuovamente il login');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAuthStatus();\n  }, []);\n\n  // Funzione di login\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data } = await axios.post(`${API_URL}/auth/login`, { email, password });\n      \n      if (data.success) {\n        // Salva il token nel localStorage\n        localStorage.setItem('token', data.user.token);\n        \n        // Configura axios interceptors\n        setupAxiosInterceptors(data.user.token);\n        \n        setUser(data.user);\n        setIsAuthenticated(true);\n        \n        return { success: true };\n      } else {\n        throw new Error(data.message || 'Credenziali non valide');\n      }\n    } catch (err) {\n      setError(err.response?.data?.message || 'Errore durante il login');\n      return { success: false, error: err.response?.data?.message || 'Errore durante il login' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Funzione di registrazione\n  const register = async (name, email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data } = await axios.post(`${API_URL}/auth/register`, { name, email, password });\n      \n      if (data.success) {\n        // Salva il token nel localStorage\n        localStorage.setItem('token', data.user.token);\n        \n        // Configura axios interceptors\n        setupAxiosInterceptors(data.user.token);\n        \n        setUser(data.user);\n        setIsAuthenticated(true);\n        \n        return { success: true };\n      } else {\n        throw new Error(data.message || 'Errore durante la registrazione');\n      }\n    } catch (err) {\n      setError(err.response?.data?.message || 'Errore durante la registrazione');\n      return { success: false, error: err.response?.data?.message || 'Errore durante la registrazione' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Funzione di logout\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n    setIsAuthenticated(false);\n    \n    // Reimposta gli interceptors\n    setupAxiosInterceptors(null);\n    \n    // Redirect alla home\n    window.location.href = '/';\n  };\n\n  // Funzione per aggiornare il profilo\n  const updateProfile = async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data } = await axios.put(`${API_URL}/auth/profile`, userData);\n      \n      if (data.success) {\n        setUser(data.user);\n        \n        // Aggiorna il token se è stato restituito un nuovo token\n        if (data.user.token) {\n          localStorage.setItem('token', data.user.token);\n          setupAxiosInterceptors(data.user.token);\n        }\n        \n        return { success: true };\n      } else {\n        throw new Error(data.message || 'Errore durante l\\'aggiornamento del profilo');\n      }\n    } catch (err) {\n      setError(err.response?.data?.message || 'Errore durante l\\'aggiornamento del profilo');\n      return { success: false, error: err.response?.data?.message || 'Errore durante l\\'aggiornamento del profilo' };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Valore del contesto\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}